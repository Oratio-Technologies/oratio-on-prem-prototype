version: '3.8'

services:
  backend:
    image: oratio_prototype_backend
    build:
      context: .
      dockerfile: .docker/Dockerfile.backend
    ports:
      - "8080:8080"
    env_file:
      - ./backend/.env
      
    networks:
      - my-network

  frontend:
    image: oratio_prototype_frontend
    build:
      context: .
      dockerfile: .docker/Dockerfile.frontend
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - my-network

networks:
  my-network:
    driver: bridge



# version: '3.8'

# services:
#   mongo1:
#     image: mongo:5
#     container_name: mongo1
#     command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001"]
#     volumes:
#       - mongo-replica-1-data:/data/db
#     ports:
#       - "30001:30001"
#     healthcheck:
#       test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
#       interval: 10s
#       start_period: 30s
#     restart: always
#     networks:
#       - my-network

#   mongo2:
#     image: mongo:5
#     container_name: mongo2
#     command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30002"]
#     volumes:
#       - mongo-replica-2-data:/data/db
#     ports:
#       - "30002:30002"
#     networks:
#       - my-network
#     restart: always

#   mongo3:
#     image: mongo:5
#     container_name: mongo3
#     command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30003"]
#     volumes:
#       - mongo-replica-3-data:/data/db
#     ports:
#       - "30003:30003"
#     networks:
#       - my-network
#     restart: always

#   mq:
#     image: rabbitmq:3-management-alpine
#     container_name: oratio-mq
#     ports:
#       - "5673:5672"
#       - "15673:15672"
#     volumes:
#       - ./rabbitmq/data:/var/lib/rabbitmq/
#       - ./rabbitmq/log:/var/log/rabbitmq
#     restart: always

#   qdrant:
#     image: qdrant/qdrant:latest
#     container_name: oratio-qdrant
#     ports:
#       - "6333:6333"
#       - "6334:6334"
#     expose:
#       - "6333"
#       - "6334"
#       - "6335"
#     volumes:
#       - qdrant-data:/qdrant_data
#     restart: always

#   backend:
#     image: oratio_prototype_backend
#     build:
#       context: .
#       dockerfile: .docker/Dockerfile.backend
#     ports:
#       - "8080:8080"
#     env_file:
#       - ./backend/.env
#     depends_on:
#       - mongo1
#       - mongo2
#       - mongo3
#     networks:
#       - my-network

#   frontend:
#     image: oratio_prototype_frontend
#     build:
#       context: .
#       dockerfile: .docker/Dockerfile.frontend
#     ports:
#       - "8501:8501"
#     depends_on:
#       - backend
#     networks:
#       - my-network

# networks:
#   my-network:
#     driver: bridge

# volumes:
#   mongo-replica-1-data:
#   mongo-replica-2-data:
#   mongo-replica-3-data:
#   qdrant-data:
